// <auto-generated />
using System;
using Lab6.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab6.Migrations
{
    [DbContext(typeof(BookingContext))]
    [Migration("20241030172616_Test2")]
    partial class Test2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Lab6.Models.Booking", b =>
                {
                    b.Property<int>("booking_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("booking_id"));

                    b.Property<string>("BookingStatusbooking_status_code")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<string>("Vehiclereg_number")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.Property<string>("booking_status_code")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<string>("confirmation_letter_sent_yn")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<int>("customer_id")
                        .HasColumnType("int");

                    b.Property<int>("customer_id1")
                        .HasColumnType("int");

                    b.Property<DateTime>("date_from")
                        .HasColumnType("date");

                    b.Property<DateTime>("date_to")
                        .HasColumnType("date");

                    b.Property<string>("payment_received_yn")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("reg_number")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.HasKey("booking_id");

                    b.HasIndex("BookingStatusbooking_status_code");

                    b.HasIndex("Vehiclereg_number");

                    b.HasIndex("customer_id1");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Lab6.Models.BookingStatus", b =>
                {
                    b.Property<string>("booking_status_code")
                        .HasColumnType("char(3)");

                    b.Property<string>("booking_status_description")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.HasKey("booking_status_code");

                    b.ToTable("BookingStatuses");
                });

            modelBuilder.Entity("Lab6.Models.Customer", b =>
                {
                    b.Property<int>("customer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("customer_id"));

                    b.Property<string>("address_line_1")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("address_line_2")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("address_line_3")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("county")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("customer_details")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("customer_name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("email_address")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("char(1)");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("town")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("customer_id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Lab6.Models.Manufacturer", b =>
                {
                    b.Property<string>("manufacturer_code")
                        .HasColumnType("char(10)");

                    b.Property<string>("manufacturer_details")
                        .IsRequired()
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("manufacturer_name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("manufacturer_code");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("Lab6.Models.Model", b =>
                {
                    b.Property<string>("model_code")
                        .HasColumnType("char(10)");

                    b.Property<decimal>("daily_hire_rate")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("model_name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("model_code");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Lab6.Models.Vehicle", b =>
                {
                    b.Property<string>("reg_number")
                        .HasColumnType("char(10)");

                    b.Property<string>("VehicleCategoryvehicle_category_code")
                        .HasColumnType("char(5)");

                    b.Property<int>("current_mileage")
                        .HasColumnType("int");

                    b.Property<decimal>("daily_hire_rate")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateTime>("date_mot_due")
                        .HasColumnType("date");

                    b.Property<string>("manufacturer_code")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.Property<string>("manufacturer_code1")
                        .HasColumnType("char(10)");

                    b.Property<string>("model_code")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.Property<string>("model_code1")
                        .HasColumnType("char(10)");

                    b.Property<string>("vehicle_category_code")
                        .IsRequired()
                        .HasColumnType("char(5)");

                    b.HasKey("reg_number");

                    b.HasIndex("VehicleCategoryvehicle_category_code");

                    b.HasIndex("manufacturer_code1");

                    b.HasIndex("model_code1");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Lab6.Models.VehicleCategory", b =>
                {
                    b.Property<string>("vehicle_category_code")
                        .HasColumnType("char(5)");

                    b.Property<string>("vehicle_category_description")
                        .IsRequired()
                        .HasColumnType("char(10)");

                    b.HasKey("vehicle_category_code");

                    b.ToTable("VehicleCategories");
                });

            modelBuilder.Entity("Lab6.Models.Booking", b =>
                {
                    b.HasOne("Lab6.Models.BookingStatus", "BookingStatus")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingStatusbooking_status_code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Vehicle", "Vehicle")
                        .WithMany("Bookings")
                        .HasForeignKey("Vehiclereg_number")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6.Models.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("customer_id1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingStatus");

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Lab6.Models.Vehicle", b =>
                {
                    b.HasOne("Lab6.Models.VehicleCategory", "VehicleCategory")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleCategoryvehicle_category_code");

                    b.HasOne("Lab6.Models.Manufacturer", "Manufacturer")
                        .WithMany("Vehicles")
                        .HasForeignKey("manufacturer_code1");

                    b.HasOne("Lab6.Models.Model", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("model_code1");

                    b.Navigation("Manufacturer");

                    b.Navigation("Model");

                    b.Navigation("VehicleCategory");
                });

            modelBuilder.Entity("Lab6.Models.BookingStatus", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Lab6.Models.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Lab6.Models.Manufacturer", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Lab6.Models.Model", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Lab6.Models.Vehicle", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Lab6.Models.VehicleCategory", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
